name: CI/CD Pipeline with Blue-Green Deployment

on:
  push:
    branches: [ develop, main, master ]
  pull_request:
    branches: [ develop, main, master ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'development'
        type: choice
        options:
          - development
          - staging
          - production
      force_deploy:
        description: 'Force deployment even if tests fail'
        required: false
        default: false
        type: boolean

jobs:
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Lint code
        run: npm run lint

      - name: Run unit tests
        run: npm run test:unit

      - name: Run integration tests
        run: npm run test:integration

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: code-quality
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        run: npm audit --audit-level=high

      - name: Run OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'chatbot-platform'
          path: '.'
          format: 'HTML'
          out: 'reports'
          args: >-
            --failOnCVSS 7
            --enableRetired

      - name: Upload dependency check report
        uses: actions/upload-artifact@v3
        with:
          name: dependency-check-report
          path: reports

      - name: Run SonarQube Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [code-quality, security-scan]
    outputs:
      image_tag: ${{ steps.set-outputs.outputs.image_tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Generate image tag
        id: set-outputs
        run: |
          SHA_SHORT=$(echo ${{ github.sha }} | cut -c1-7)
          echo "image_tag=${SHA_SHORT}" >> $GITHUB_OUTPUT

      - name: Build and push frontend image
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          push: true
          tags: |
            qaaph-zyld/chatbot-platform-frontend:${{ steps.set-outputs.outputs.image_tag }}
            qaaph-zyld/chatbot-platform-frontend:latest
          cache-from: type=registry,ref=qaaph-zyld/chatbot-platform-frontend:buildcache
          cache-to: type=registry,ref=qaaph-zyld/chatbot-platform-frontend:buildcache,mode=max

      - name: Build and push backend image
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          push: true
          tags: |
            qaaph-zyld/chatbot-platform-backend:${{ steps.set-outputs.outputs.image_tag }}
            qaaph-zyld/chatbot-platform-backend:latest
          cache-from: type=registry,ref=qaaph-zyld/chatbot-platform-backend:buildcache
          cache-to: type=registry,ref=qaaph-zyld/chatbot-platform-backend:buildcache,mode=max

      - name: Scan container images
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'qaaph-zyld/chatbot-platform-backend:${{ steps.set-outputs.outputs.image_tag }}'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

  deploy-development:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop' || github.event.inputs.environment == 'development'
    environment: development
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Configure kubectl
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBE_CONFIG_DEV }}" > $HOME/.kube/config
          chmod 600 $HOME/.kube/config

      - name: Deploy to development
        run: |
          kubectl set image deployment/chatbot-platform-dev backend=qaaph-zyld/chatbot-platform-backend:${{ needs.build.outputs.image_tag }} frontend=qaaph-zyld/chatbot-platform-frontend:${{ needs.build.outputs.image_tag }} -n chatbot-platform-dev
          kubectl rollout status deployment/chatbot-platform-dev -n chatbot-platform-dev --timeout=300s

      - name: Run smoke tests
        run: |
          export TEST_URL=https://dev-chatbot-platform.example.com
          node tests/smoke/smoke-tests.js

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' || github.event.inputs.environment == 'staging'
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Configure kubectl
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBE_CONFIG_STAGING }}" > $HOME/.kube/config
          chmod 600 $HOME/.kube/config

      - name: Deploy to staging
        run: |
          kubectl set image deployment/chatbot-platform-staging backend=qaaph-zyld/chatbot-platform-backend:${{ needs.build.outputs.image_tag }} frontend=qaaph-zyld/chatbot-platform-frontend:${{ needs.build.outputs.image_tag }} -n chatbot-platform-staging
          kubectl rollout status deployment/chatbot-platform-staging -n chatbot-platform-staging --timeout=300s

      - name: Run verification tests
        run: |
          export TEST_URL=https://staging-chatbot-platform.example.com
          node tests/smoke/smoke-tests.js
          node tests/verification/ui-verification.js
          node tests/performance/performance-tests.js
          node tests/security/security-tests.js

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/master' || github.event.inputs.environment == 'production'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Configure kubectl
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBE_CONFIG_PROD }}" > $HOME/.kube/config
          chmod 600 $HOME/.kube/config

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Blue-Green Deployment
        run: |
          export DEPLOYMENT_ID=${{ github.run_id }}
          export IMAGE_TAG=${{ needs.build.outputs.image_tag }}
          export NAMESPACE=chatbot-platform-prod
          export DEPLOYMENT_NAME=chatbot-platform
          node scripts/deployment/blue-green.js

      - name: Run smoke tests on new deployment
        id: smoke-tests
        run: |
          export TEST_URL=https://chatbot-platform-${{ github.run_id }}.example.com
          node tests/smoke/smoke-tests.js
        continue-on-error: ${{ github.event.inputs.force_deploy == 'true' }}

      - name: Run UI verification tests
        id: ui-tests
        run: |
          export TEST_URL=https://chatbot-platform-${{ github.run_id }}.example.com
          node tests/verification/ui-verification.js
        continue-on-error: ${{ github.event.inputs.force_deploy == 'true' }}

      - name: Run performance tests
        id: performance-tests
        run: |
          export TEST_URL=https://chatbot-platform-${{ github.run_id }}.example.com
          node tests/performance/performance-tests.js
        continue-on-error: ${{ github.event.inputs.force_deploy == 'true' }}

      - name: Run security tests
        id: security-tests
        run: |
          export TEST_URL=https://chatbot-platform-${{ github.run_id }}.example.com
          node tests/security/security-tests.js
        continue-on-error: ${{ github.event.inputs.force_deploy == 'true' }}

      - name: Switch traffic to new deployment
        if: |
          (steps.smoke-tests.outcome == 'success' || github.event.inputs.force_deploy == 'true') &&
          (steps.ui-tests.outcome == 'success' || github.event.inputs.force_deploy == 'true') &&
          (steps.performance-tests.outcome == 'success' || github.event.inputs.force_deploy == 'true') &&
          (steps.security-tests.outcome == 'success' || github.event.inputs.force_deploy == 'true')
        run: |
          node scripts/deployment/switch-traffic.js

      - name: Rollback if tests failed
        if: |
          (steps.smoke-tests.outcome == 'failure' || 
           steps.ui-tests.outcome == 'failure' || 
           steps.performance-tests.outcome == 'failure' || 
           steps.security-tests.outcome == 'failure') && 
          github.event.inputs.force_deploy != 'true'
        run: |
          node scripts/deployment/rollback.js

      - name: Start monitoring
        run: |
          export DEPLOYMENT_ID=${{ github.run_id }}
          export NAMESPACE=chatbot-platform-prod
          export DEPLOYMENT_NAME=chatbot-platform
          export SLACK_WEBHOOK_URL=${{ secrets.SLACK_WEBHOOK_URL }}
          export PAGERDUTY_ROUTING_KEY=${{ secrets.PAGERDUTY_ROUTING_KEY }}
          node scripts/deployment/monitoring.js &

  notify:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs: [deploy-development, deploy-staging, deploy-production]
    if: always()
    steps:
      - name: Determine deployment status
        id: status
        run: |
          if [[ "${{ needs.deploy-production.result }}" == "success" || "${{ needs.deploy-staging.result }}" == "success" || "${{ needs.deploy-development.result }}" == "success" ]]; then
            echo "status=success" >> $GITHUB_OUTPUT
          else
            echo "status=failure" >> $GITHUB_OUTPUT
          fi

      - name: Determine environment
        id: environment
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/master" || "${{ github.event.inputs.environment }}" == "production" ]]; then
            echo "env=production" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/main" || "${{ github.event.inputs.environment }}" == "staging" ]]; then
            echo "env=staging" >> $GITHUB_OUTPUT
          else
            echo "env=development" >> $GITHUB_OUTPUT
          fi

      - name: Send Slack notification
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_CHANNEL: deployments
          SLACK_COLOR: ${{ steps.status.outputs.status == 'success' && 'good' || 'danger' }}
          SLACK_TITLE: Deployment ${{ steps.status.outputs.status == 'success' && 'Successful' || 'Failed' }}
          SLACK_MESSAGE: |
            Environment: ${{ steps.environment.outputs.env }}
            Commit: ${{ github.sha }}
            Author: ${{ github.actor }}
            ${{ steps.status.outputs.status == 'success' && '✅ Deployment completed successfully' || '❌ Deployment failed' }}
          SLACK_FOOTER: Chatbot Platform CI/CD Pipeline

      - name: Send email notification
        if: steps.status.outputs.status == 'failure'
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: ${{ secrets.MAIL_SERVER }}
          server_port: ${{ secrets.MAIL_PORT }}
          username: ${{ secrets.MAIL_USERNAME }}
          password: ${{ secrets.MAIL_PASSWORD }}
          subject: "[ALERT] Deployment Failed: ${{ steps.environment.outputs.env }}"
          body: |
            Deployment to ${{ steps.environment.outputs.env }} failed.
            
            Commit: ${{ github.sha }}
            Author: ${{ github.actor }}
            Repository: ${{ github.repository }}
            Workflow: ${{ github.workflow }}
            
            Please check the GitHub Actions logs for more details:
            ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          to: ${{ secrets.ALERT_EMAIL_TO }}
          from: CI/CD Pipeline <${{ secrets.ALERT_EMAIL_FROM }}>
