name: Chatbot Platform CI/CD

on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ master, main, develop ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - development
          - staging
          - production
      force_color:
        description: 'Force deployment color (blue/green)'
        required: false
        type: choice
        options:
          - auto
          - blue
          - green
        default: 'auto'

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run ESLint
        run: npm run lint
        
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run tests
        run: npm test
        
      - name: Upload test results
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: test-results/
          
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run npm audit
        run: npm audit --audit-level=high
        
      - name: Run OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'Chatbot Platform'
          path: '.'
          format: 'HTML'
          out: 'reports'
          
      - name: Upload security report
        uses: actions/upload-artifact@v3
        with:
          name: security-reports
          path: reports/
          
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build application
        run: npm run build
        
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: dist/
          
  docker-build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=sha,format=long
            
      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: docker-build
    if: github.ref == 'refs/heads/develop' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'development')
    environment: development
    steps:
      - uses: actions/checkout@v3
      
      - name: Set Kubernetes context
        uses: azure/k8s-set-context@v3
        with:
          kubeconfig: ${{ secrets.KUBE_CONFIG_DEV }}
          
      - name: Deploy to Kubernetes
        run: |
          kubectl apply -f k8s/dev/
          kubectl set image deployment/chatbot-platform chatbot-platform=ghcr.io/${{ github.repository }}:sha-${{ github.sha }}
          kubectl rollout status deployment/chatbot-platform
          
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: docker-build
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment: staging
    steps:
      - uses: actions/checkout@v3
      
      - name: Set Kubernetes context
        uses: azure/k8s-set-context@v3
        with:
          kubeconfig: ${{ secrets.KUBE_CONFIG_STAGING }}
          
      - name: Deploy to Kubernetes
        run: |
          kubectl apply -f k8s/staging/
          kubectl set image deployment/chatbot-platform chatbot-platform=ghcr.io/${{ github.repository }}:sha-${{ github.sha }}
          kubectl rollout status deployment/chatbot-platform
          
  deploy-production:
    name: Deploy to Production (Blue/Green)
    runs-on: ubuntu-latest
    needs: docker-build
    if: github.ref == 'refs/heads/master' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment:
      name: production
      url: https://chatbot-platform.example.com
    steps:
      - uses: actions/checkout@v3
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        
      - name: Update kubeconfig
        run: aws eks update-kubeconfig --name chatbot-platform-cluster --region us-east-1
        
      - name: Determine active deployment color
        id: get-active-color
        run: |
          if [[ "${{ github.event.inputs.force_color }}" != "auto" && "${{ github.event.inputs.force_color }}" != "" ]]; then
            echo "Using forced deployment color: ${{ github.event.inputs.force_color }}"
            echo "inactive_color=${{ github.event.inputs.force_color }}" >> $GITHUB_OUTPUT
          else
            CURRENT_COLOR=$(kubectl get service chatbot-platform -n chatbot-platform-prod -o jsonpath='{.spec.selector.color}')
            if [[ "$CURRENT_COLOR" == "blue" ]]; then
              echo "Current deployment is blue, deploying to green"
              echo "inactive_color=green" >> $GITHUB_OUTPUT
            else
              echo "Current deployment is green or not found, deploying to blue"
              echo "inactive_color=blue" >> $GITHUB_OUTPUT
            fi
          fi
        
      - name: Deploy to inactive environment
        run: |
          DEPLOY_COLOR=${{ steps.get-active-color.outputs.inactive_color }}
          echo "Deploying to $DEPLOY_COLOR environment"
          
          # Update image tag in deployment file
          sed -i "s|image: ghcr.io/qaaph-zyld/chatbots:latest|image: ghcr.io/qaaph-zyld/chatbots:${{ github.sha }}|g" k8s/production/deployment-$DEPLOY_COLOR.yaml
          
          # Apply deployment
          kubectl apply -f k8s/production/deployment-$DEPLOY_COLOR.yaml
          kubectl rollout status deployment/chatbot-platform-$DEPLOY_COLOR -n chatbot-platform-prod
          
          # Run blue-green deployment script
          node scripts/deployment/blue-green.js
        env:
          NAMESPACE: chatbot-platform-prod
          BLUE_DEPLOYMENT: chatbot-platform-blue
          GREEN_DEPLOYMENT: chatbot-platform-green
          SERVICE_NAME: chatbot-platform
          IMAGE: ghcr.io/qaaph-zyld/chatbots
          VERSION: ${{ github.sha }}
          DEPLOYMENT_ID: ${{ github.run_id }}
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      
      - name: Run smoke tests against new deployment
        id: smoke-tests
        run: |
          DEPLOY_COLOR=${{ steps.get-active-color.outputs.inactive_color }}
          
          # Set test URL to the specific color service
          export TEST_URL=http://chatbot-platform-$DEPLOY_COLOR.chatbot-platform-prod.svc.cluster.local
          
          # Run smoke tests
          node tests/smoke/smoke-tests.js
        env:
          TEST_USER_EMAIL: ${{ secrets.TEST_USER_EMAIL }}
          TEST_USER_PASSWORD: ${{ secrets.TEST_USER_PASSWORD }}
          
      - name: Run deployment verification tests
        id: verification-tests
        run: |
          DEPLOY_COLOR=${{ steps.get-active-color.outputs.inactive_color }}
          
          # Set test URL to the specific color service
          export TEST_URL=http://chatbot-platform-$DEPLOY_COLOR.chatbot-platform-prod.svc.cluster.local
          
          # Run UI verification tests
          npx playwright install --with-deps
          node tests/verification/ui-verification.js
          
          # Run performance tests
          node tests/performance/performance-tests.js
          
          # Run security tests
          node tests/security/security-tests.js
        env:
          TEST_USER_EMAIL: ${{ secrets.TEST_USER_EMAIL }}
          TEST_USER_PASSWORD: ${{ secrets.TEST_USER_PASSWORD }}
      
      - name: Switch traffic to new deployment
        if: steps.smoke-tests.outcome == 'success' && steps.verification-tests.outcome == 'success'
        run: |
          DEPLOY_COLOR=${{ steps.get-active-color.outputs.inactive_color }}
          
          # Update the main service to point to the new deployment
          kubectl patch service chatbot-platform -n chatbot-platform-prod -p '{"spec":{"selector":{"color":"'"$DEPLOY_COLOR"'"}}}'          
          
          echo "Traffic switched to $DEPLOY_COLOR deployment"
      
      - name: Verify production health
        run: |
          # Wait for DNS propagation
          sleep 30
          
          # Check health endpoint
          curl -f https://chatbot-platform.example.com/health || exit 1
          
          echo "Production deployment verified successfully"
      
      - name: Rollback on failure
        if: failure()
        run: |
          echo "Deployment failed, rolling back"
          
          # Run rollback script
          node scripts/deployment/rollback.js "Deployment verification failed"
        env:
          NAMESPACE: chatbot-platform-prod
          DEPLOYMENT_NAME: chatbot-platform
          SERVICE_NAME: chatbot-platform
          DEPLOYMENT_ID: ${{ github.run_id }}
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          PAGERDUTY_ROUTING_KEY: ${{ secrets.PAGERDUTY_ROUTING_KEY }}
          
  notify:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs: [deploy-dev, deploy-staging, deploy-production]
    if: always()
    steps:
      - name: Send Slack notification
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,message,commit,author,action,eventName,ref,workflow,job,took
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          
  deployment-report:
    name: Generate Deployment Report
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always() && (github.ref == 'refs/heads/master' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production'))
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Download test artifacts
        uses: actions/download-artifact@v3
        with:
          name: test-results
          path: test-results/
          
      - name: Generate deployment report
        run: node scripts/generate-deployment-report.js
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DEPLOYMENT_SHA: ${{ github.sha }}
          DEPLOYMENT_REF: ${{ github.ref }}
          DEPLOYMENT_ENVIRONMENT: production
          
      - name: Upload deployment report
        uses: actions/upload-artifact@v3
        with:
          name: deployment-report
          path: reports/deployment-report.html
        if: always()
